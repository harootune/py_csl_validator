// TERMINALS

XSD_DATETIME_LITERAL: XSD_DATE_WITHOUT_TIMEZONE_COMPONENT "T" XSD_TIME_LITERAL

XSD_DATETIME_WITH_TIMEZONE_LITERAL: XSD_DATE_WITHOUT_TIMEZONE_COMPONENT "T" XSD_TIME_WITHOUT_TIMEZONE_COMPONENT XSD_TIMEZONE_COMPONENT

XSD_DATE_LITERAL: XSD_DATE_WITHOUT_TIMEZONE_COMPONENT XSD_OPTIONAL_TIMEZONE_COMPONENT

XSD_TIME_LITERAL: XSD_TIME_WITHOUT_TIMEZONE_COMPONENT XSD_TIMEZONE_COMPONENT

XSD_DATE_WITHOUT_TIMEZONE_COMPONENT: /-?[0-9]{4}-(((0(1|3|5|7|8)|1(0|2))-(0[1-9]|(1|2)[0-9]|3[0-1]))|((0(4|6|9)|11)-(0[1-9]|(1|2)[0-9]|30))|(02-(0[1-9]|(1|2)[0-9])))/

XSD_TIME_WITHOUT_TIMEZONE_COMPONENT: /([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-9]{3})?/

XSD_OPTIONAL_TIMEZONE_COMPONENT: /((\+|-)(0[1-9]|1[0-9]|2[0-4]):(0[0-9]|[1-5][0-9])|Z)?/

XSD_TIMEZONE_COMPONENT: /((\+|-)(0[1-9]|1[0-9]|2[0-4]):(0[0-9]|[1-5][0-9])|Z)/

UK_DATE_LITERAL: /(((0[1-9]|(1|2)[0-9]|3[0-1])\/(0(1|3|5|7|8)|1(0|2)))|((0[1-9]|(1|2)[0-9]|30)\/(0(4|6|9)|11))|((0[1-9]|(1|2)[0-9])\/02))\/[0-9]{4}/

POSITIVE_NONZERO_INTEGER_LITERAL: /[1-9][0-9]*/

POSITIVE_INTEGER_LITERAL: /[0-9]+/

NUMERIC_LITERAL: /-?[0-9]+(\.[0-9]+)?/

STRING_LITERAL: "\"" /[^"]*/ "\""

CHARACTER_LITERAL: "'" /[^"]/ "'"

WILDCARD_LITERAL: "*"

IDENT: /[A-Za-z0-9\-_\.]+/


// rules
start: schema

schema: prolog body

prolog: version_decl global_directives

version_decl: ("version 1.0" | "version 1.1" | "version 1.2")

global_directives: (separator_directive | quoted_directive | total_columns_directive | permit_empty_directive
| no_header_directive | ignore_column_name_case_directive)* // unordered

directive_prefix: "@"

separator_directive: directive_prefix "separator" (separator_tab_expr | separator_char)

separator_tab_expr: "TAB" | "\t"

separator_char: CHARACTER_LITERAL

quoted_directive: directive_prefix "quoted"

total_columns_directive: directive_prefix "totalColumns" POSITIVE_NONZERO_INTEGER_LITERAL

permit_empty_directive: directive_prefix "permitEmpty"

no_header_directive: directive_prefix "noHeader"

ignore_column_name_case_directive: directive_prefix "ignoreColumnNameCase"

body: body_part+

body_part: comment* column_definition comment*

comment: single_line_comment | multi_line_comment

single_line_comment: /\/\/[\S\t ]*/

multi_line_comment: /\/\*(?:[^*\r\n]+|(?:\r?\n))*\*\//

column_definition: (column_identifier | quoted_column_identifier) ":" column_rule

column_identifier: POSITIVE_NONZERO_INTEGER_LITERAL | IDENT

quoted_column_identifier: STRING_LITERAL

column_rule: column_validation_expr* column_directives

column_directives: (optional_directive | match_is_false_directive | ignore_case_directive | warning_directive)* //unordered

optional_directive: directive_prefix "optional"

match_is_false_directive: directive_prefix "matchIsFalse"

ignore_case_directive: directive_prefix "ignoreCase"

warning_directive: directive_prefix "warningDirective"

column_validation_expr: combinatorial_expr | non_combinatorial_expr

combinatorial_expr: or_expr | and_expr

or_expr: non_combinatorial_expr "or" column_validation_expr

and_expr: non_combinatorial_expr "and" column_validation_expr

non_combinatorial_expr: non_conditional_expr | conditional_expr

non_conditional_expr: single_expr | external_single_expr | parenthesized_expr

single_expr: explicit_context_expr? (is_expr | any_expr | not_expr | in_expr | starts_with_expr | ends_with_expr
| reg_exp_expr | range_expr | length_expr | empty_expr | not_empty_expr | unique_expr | uri_expr | xsd_datetime_expr
| xsd_datetime_with_timezone_expr | xsd_date_expr | xsd_time_expr | uk_date_expr | date_expr | partial_uk_date_expr
| partial_date_expr | uuid4_expr | positive_integer_expr | uppercase_expr | lowercase_expr | identical_expr)

explicit_context_expr: column_ref "/"

column_ref: "$" (column_identifier | quoted_column_identifier)

is_expr: "is(" string_provider ")"

any_expr: "any(" string_provider ("," string_provider)* ")"

not_expr: "not(" string_provider ")"

in_expr: "in(" string_provider ")"

starts_with_expr: "starts(" string_provider ")"

ends_with_expr: "ends(" string_provider ")"

reg_exp_expr: "regex(" STRING_LITERAL ")"

range_expr: "range(" (numeric_or_any "," NUMERIC_LITERAL | NUMERIC_LITERAL "," numeric_or_any) ")"

numeric_or_any: NUMERIC_LITERAL | WILDCARD_LITERAL

length_expr: "length(" (positive_integer_or_any ",")? positive_integer_or_any ")"

positive_integer_or_any: POSITIVE_INTEGER_LITERAL | WILDCARD_LITERAL

empty_expr: "empty"

not_empty_expr: "notEmpty"

unique_expr: "unique" ("(" column_ref ("," column_ref)* ")")?

uri_expr: "uri"

xsd_datetime_expr: "xDateTime" ("(" XSD_DATETIME_LITERAL "," XSD_DATETIME_LITERAL ")")?

xsd_datetime_with_timezone_expr: "xDateTimeTz" ("(" XSD_DATETIME_WITH_TIMEZONE_LITERAL "," XSD_DATETIME_WITH_TIMEZONE_LITERAL ")")?

xsd_date_expr: "xDate" ("(" XSD_DATE_LITERAL "," XSD_DATE_LITERAL ")")?

xsd_time_expr: "xTime" ("(" XSD_TIME_LITERAL "," XSD_TIME_LITERAL ")")?

uk_date_expr: "ukDate" ("(" UK_DATE_LITERAL "," UK_DATE_LITERAL ")")?

date_expr: "date(" string_provider "," string_provider "," string_provider ("," XSD_DATE_LITERAL "," XSD_DATE_LITERAL)? ")"

partial_uk_date_expr: "partUkDate"

partial_date_expr: "partDate(" string_provider "," string_provider "," string_provider ")"

uuid4_expr: "uuid4"

positive_integer_expr: "positiveInteger"

uppercase_expr: "upperCase"

lowercase_expr: "lowerCase"

identical_expr: "identical"

external_single_expr: explicit_context_expr? (file_exists_expr | integrity_check_expr | checksum_expr | file_count_expr)

file_exists_expr: "fileExists" ("(" string_provider ")")?

integrity_check_expr: "integrityCheck" "(" (string_provider ",")? (string_provider ",")? ("\"includeFolder\"" | "\"excludeFolder\"") ")"

checksum_expr: "checksum(" file_expr "," STRING_LITERAL ")"

file_expr: "file(" (string_provider ",")? string_provider ")"

file_count_expr: "fileCount(" file_expr ")"

string_provider: column_ref | STRING_LITERAL | concat_expr | no_ext_expr | uri_decode_expr

concat_expr: "concat(" string_provider ("," string_provider)+ ")"

no_ext_expr: "noExt(" string_provider ")"

uri_decode_expr: "uriDecode(" string_provider ("," string_provider)? ")"

parenthesized_expr: "(" column_validation_expr+ ")"

conditional_expr: if_expr | switch_expr

if_expr: "if(" (combinatorial_expr | non_conditional_expr) "," column_validation_expr+ ("," column_validation_expr+)? ")"

switch_expr: "switch(" switch_case_expr+ ("," column_validation_expr+)? ")"

switch_case_expr: "if(" (combinatorial_expr | non_conditional_expr) "," column_validation_expr+ ")"

//imports

%import common.WS
%ignore WS











